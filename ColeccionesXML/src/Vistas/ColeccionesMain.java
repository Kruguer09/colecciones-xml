/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package Vistas;

import Controlador.OperacionesBD;
import java.awt.Desktop;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.basex.core.cmd.XQuery;

/**
 *
 * @author USER
 */
public class ColeccionesMain extends javax.swing.JDialog {

    private OperacionesBD operador = new OperacionesBD();

    /**
     * Creates new form ColeccionesMain
     */
    public ColeccionesMain(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        // Centrar el diálogo en la pantalla
    setLocationRelativeTo(null);
    
    // Cambiar el título del diálogo
    setTitle("Copias de seguridad");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ruta = new javax.swing.JTextField();
        buttonSelec = new javax.swing.JButton();
        buttonLibros = new javax.swing.JButton();
        buttonAutor = new javax.swing.JButton();
        buttonPrestamo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtHoja = new javax.swing.JTextArea();
        buttonOpenDir = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("COPIA DE SEGURIDAD - COLECCIONES");

        jLabel2.setText("Directorio de copias: ");

        buttonSelec.setText("SELECCIONAR");
        buttonSelec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSelecActionPerformed(evt);
            }
        });

        buttonLibros.setText("Extraer Libros");
        buttonLibros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLibrosActionPerformed(evt);
            }
        });

        buttonAutor.setText("Extraer Autor");
        buttonAutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAutorActionPerformed(evt);
            }
        });

        buttonPrestamo.setText("Extraer Préstamos");
        buttonPrestamo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrestamoActionPerformed(evt);
            }
        });

        txtHoja.setColumns(20);
        txtHoja.setRows(5);
        jScrollPane1.setViewportView(txtHoja);

        buttonOpenDir.setText("ABRIR DIRECTORIO");
        buttonOpenDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOpenDirActionPerformed(evt);
            }
        });
        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ruta, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(92, 92, 92)
                                .addComponent(buttonSelec))
                            .addComponent(buttonLibros)
                            .addComponent(buttonAutor)
                            .addComponent(buttonPrestamo)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(buttonOpenDir)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addGap(33, 33, 33)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ruta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSelec))
                .addGap(18, 18, 18)
                .addComponent(buttonLibros)
                .addGap(29, 29, 29)
                .addComponent(buttonAutor)
                .addGap(31, 31, 31)
                .addComponent(buttonPrestamo)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonOpenDir)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonSelecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSelecActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); // Solo permitir seleccionar directorios
        int result = chooser.showOpenDialog(this); // Mostrar el diálogo de selección de directorio

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedDir = chooser.getSelectedFile(); // Obtener el directorio seleccionado
            String sRuta = selectedDir.getAbsolutePath(); // Obtener la ruta absoluta del directorio

            // Establecer la ruta en el textField
            ruta.setText(sRuta);
        } else if (result == JFileChooser.CANCEL_OPTION) {
            // El usuario canceló la selección, puedes manejarlo aquí si es necesario
        }
    }//GEN-LAST:event_buttonSelecActionPerformed

    private void buttonOpenDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOpenDirActionPerformed
        // Obtener la ruta del textField
        String sRuta = ruta.getText();

        // Verificar si el campo está vacío
        if (sRuta.isEmpty()) {
            // Mostrar un mensaje de error
            JOptionPane.showMessageDialog(this, "No hay directorio seleccionado", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método
        } else {
            // Crear un objeto File con la ruta
            File dir = new File(sRuta);

            // Verificar si el directorio existe
            if (dir.exists() && dir.isDirectory()) {
                try {
                    // Abrir el directorio en el explorador de archivos del sistema
                    Desktop.getDesktop().open(dir);
                } catch (IOException ex) {
                    // Manejar cualquier excepción que pueda ocurrir al intentar abrir el directorio
                    ex.printStackTrace();
                }
            } else {
                // El directorio no existe o no es válido, puedes manejarlo aquí
                JOptionPane.showMessageDialog(this, "El directorio seleccionado no es válido", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }


    }//GEN-LAST:event_buttonOpenDirActionPerformed

    private void buttonLibrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLibrosActionPerformed
        realizarConsulta( "libros");
        txtHoja.setText("Libros extraidos\n");
        
    }//GEN-LAST:event_buttonLibrosActionPerformed

    private void buttonAutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAutorActionPerformed
        realizarConsulta("autor");
        txtHoja.setText("Autores extraidos\n");
    }//GEN-LAST:event_buttonAutorActionPerformed

    private void buttonPrestamoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrestamoActionPerformed
        realizarConsulta( "prestamo");
        txtHoja.setText("Prestamos extraidos\n");
    }//GEN-LAST:event_buttonPrestamoActionPerformed

    private void realizarConsulta( String tipoConsulta) {
        String sRuta = ruta.getText();
        if (sRuta.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay directorio seleccionado", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Crear el subdirectorio si no existe
        File subDir = new File(sRuta, "ADtarea52024");
        // Crear los subdirectorios libros, autores y prestamos dentro del directorio principal

        // Crear la ruta completa del archivo de salida dentro del subdirectorio
        File outputFile ;
        if (!subDir.exists()) {
            boolean created = subDir.mkdir();
            if (!created) {
                JOptionPane.showMessageDialog(this, "Error al crear el subdirectorio", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        if (tipoConsulta.contentEquals("libros")) {
            File subDirLibros = new File(subDir, "libros");
            if (!subDirLibros.exists()) {
                subDirLibros.mkdirs();
            }
            String rutaLibros = subDirLibros.getAbsolutePath();

            int numLibros = Integer.parseInt(operador.operacion("for $a in /biblioteca/libros return count($a/libro)"));
            String sCursos = "for $a in /biblioteca/libros return $a/libro[%s]";

            for (int i = 1; i <= numLibros; i++) {
                outputFile = new File(rutaLibros, "libro" + String.valueOf(i) + ".xml");
                try (BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile))) {
                    String queryFormato = String.format(sCursos, i); 
                    writer.write(operador.operacion(queryFormato));

                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Error al escribir el archivo");
                    e.printStackTrace();
                }
            }

        } else if (tipoConsulta.contentEquals("autor")) {
            File subDirAutores = new File(subDir, "autores");
            if (!subDirAutores.exists()) {
                subDirAutores.mkdirs();
            }
            String rutaAutores = subDirAutores.getAbsolutePath();
            int numAutores = Integer.parseInt(operador.operacion("count(//autor)"));
            String sAutores = "let $a := //autor return $a[%s]";
            for (int i = 1; i <= numAutores; i++) {
                outputFile = new File(rutaAutores, "autor" + String.valueOf(i) + ".xml");
                try (BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile))) {
                    String queryFormato = String.format(sAutores, i);
                    writer.write(operador.operacion(queryFormato));

                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Error al escribir el archivo");
                    e.printStackTrace();
                }
            }

        } else if (tipoConsulta.contentEquals("prestamo")) {

            File subDirPrestamos = new File(subDir, "prestamos");

            // Verificar si los subdirectorios ya existen, si no, crearlos
            if (!subDirPrestamos.exists()) {
                subDirPrestamos.mkdirs();
            }

            // Obtener la ruta a cada uno de los directorios y almacenarla en un string
            String rutaPrestamos = subDirPrestamos.getAbsolutePath();
            int numPrestamos = Integer.parseInt(operador.operacion("count(//prestamo)"));
            String sPrestamos = "let $a := //prestamo return $a[%s]";
            for (int i = 1; i <= numPrestamos; i++) {
                outputFile = new File(rutaPrestamos, "prestamo" + String.valueOf(i) + ".xml");
                try (BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile))) {
                    String queryFormato = String.format(sPrestamos, i);
                    writer.write(operador.operacion(queryFormato));

                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Error al escribir el archivo");
                    e.printStackTrace();
                }
            }
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ColeccionesMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ColeccionesMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ColeccionesMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ColeccionesMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ColeccionesMain dialog = new ColeccionesMain(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAutor;
    private javax.swing.JButton buttonLibros;
    private javax.swing.JButton buttonOpenDir;
    private javax.swing.JButton buttonPrestamo;
    private javax.swing.JButton buttonSelec;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField ruta;
    private javax.swing.JTextArea txtHoja;
    // End of variables declaration//GEN-END:variables
}
